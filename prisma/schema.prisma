// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id String  @id @default(uuid())
}

model Category{
 id String @id @default(uuid())
  name String
  image String?
  product Product[]
}

model Product{'
id String @id @default(uuid())
name String?
image String?
price Int
discount Int
initial_size String
subscriber_price Int
initial_color String
description String
category Category @relation(fields: [category_id], references:[id])
category_id String @unique
size Size[]
reviews Review[]
}

model Size{
  id  String @id @default(uuid())
  name String
  image String?
  initial_color String
  discount String
  subscriber_price Int
  price Int
  procut Product @relation(fields: [product_id], references:[id])
  product_id String @unique
colors Color[]

}

model Color{
  id String @id @default(uuid())
  name String 
  image String?
  price Int
  discount Int
  subscriber_price Int
size Size @relation(fields: [size_id], references: [id])
size_id String @unique
}

model User{
  id String @id @default(uuid())
  first_name String
  last_name String
  email String? @unique
  phone String
  passwords String
  city String
  state String
  country String
  address String
  avatar String
  review Review[]
  inbox Inbox[]
  wallet Wallet?
  orders Order[]

}

model Review{
  id String @id @default(uuid())
  rating Int
  date DateTime
  name String
  is_verified Boolean
  comment String
  avatar String
  product Product @relation(fields: [product_id], references: [id])
  product_id String 
  user User @relation(fields: [user_id], references: [id])
  user_id String @unique

}

model Inbox{
  id  String @id @default(uuid())
  date DateTime
  message String
  user User @relation(fields: [user_id], references: [id])
  user_id String @unique
}

model Wallet{
  id String @id @default(uuid())
  amount Int
  user User @relation(fields: [user_id], references: [id])
  user_id String @unique
}

model Order {
  id      String   @id @default(uuid())
  status  Status   @default(pending)
  orderitem Json
  user    User ?    @relation(fields: [user_id], references: [id])
  user_id String?  @unique
  total Float
  tax Float
  shipping Float
  arrivalDate String
  
}


enum Status{
  pending
  success
  cancelled
}